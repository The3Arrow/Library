// <auto-generated />
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    [Migration("20250110114741_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EditionYear")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "A witty romantic drama by Jane Austen exploring love, social class, and misunderstandings in 19th-century England.",
                            EditionYear = "1813",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Herman Melville's epic tale of Captain Ahab's obsessive quest to hunt the elusive white whale, Moby Dick.",
                            EditionYear = "1851",
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Hans Christian Andersen's poignant fairy tale about a mermaid who dreams of life on land and sacrifices everything for love.",
                            EditionYear = "1837",
                            Title = "The Little Mermaid"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "From the Brothers Grimm, this classic tale tells the story of a princess, her wicked stepmother, and seven helpful dwarfs.",
                            EditionYear = "1812",
                            Title = "Snow White"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Samuel Taylor Coleridge's haunting lyrical ballad about a mariner cursed after killing an albatross at sea.",
                            EditionYear = "1798",
                            Title = "The Rime of the Ancient Mariner"
                        });
                });

            modelBuilder.Entity("Library.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fairy tale"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ballad"
                        });
                });

            modelBuilder.Entity("Library.Models.Copies", b =>
                {
                    b.Property<int>("CopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopyId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("BIT");

                    b.HasKey("CopyId");

                    b.HasIndex("BookId");

                    b.ToTable("Copies");

                    b.HasData(
                        new
                        {
                            CopyId = 1,
                            BookId = 1,
                            IsAvailable = true
                        },
                        new
                        {
                            CopyId = 2,
                            BookId = 1,
                            IsAvailable = true
                        },
                        new
                        {
                            CopyId = 3,
                            BookId = 2,
                            IsAvailable = true
                        },
                        new
                        {
                            CopyId = 4,
                            BookId = 3,
                            IsAvailable = true
                        },
                        new
                        {
                            CopyId = 5,
                            BookId = 4,
                            IsAvailable = true
                        },
                        new
                        {
                            CopyId = 6,
                            BookId = 5,
                            IsAvailable = true
                        });
                });

            modelBuilder.Entity("Library.Models.Books", b =>
                {
                    b.HasOne("Library.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Library.Models.Copies", b =>
                {
                    b.HasOne("Library.Models.Books", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
